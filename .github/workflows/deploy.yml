name: Deployment
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # Usando un custom composite action en el workflow
      - name: Load & cache dependencies
        # Ponemos este id para poder hacer referencia luego a el al recuperar el valor devuelto por el custom action.
        id: cache-deps
        # Si se creó el action como un repositorio aislado en GitHub, se indica el identificador del repositorio
        # Por ejemplo:
        # uses: JoseManuelMunozManzano/udemy-gh-06-controlling-workflow-and-job-execution
        # Para un action almacenado localmente en este proyecto, se pasa el path a la carpeta del action, relativo
        # al root del proyecto. GitHub Actions busca automáticamente el fichero action.yml, por lo que no hay que
        # indicarlo.
        uses: ./.github/actions/cached-deps
        # Pasando un valor al input del custom action.
        # Como el input que espera el custom action se llama caching, aquí también lo indicamos, junto a su valor.
        with:
          caching: 'false'
        # Nuevo step para obtener el valor devuelto por el custom action justo después de usarlo.
        # El outputs.used-cache es lo que aparece en el custom action (action.yml)
      - name: Output
        run: echo "Cache used? ${{ steps.cache-deps.outputs.used-cache }}"
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # Usando un custom composite action en el workflow
      - name: Load & cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # Usando un custom composite action en el workflow
      - name: Load & cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Build website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    # Esto forma parte de la configuración de permisos una vez eliminados los secrets de AWS especificado abajo.
    # Hay que indicar permisos al id-token porque como pone en la documentación, por defecto no tiene
    # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
    # Aquí se indica write porque el token de permiso temporal que se usará en el job debe crearse como parte
    # del job.
    # Para content se indica read, y es necesario indicarlo, porque una vez se configura un permiso hay que
    # configurar todos los demás, ya que por defecto el resto de permisos se desabilitan.
    permissions:
      id-token: write
      contents: read
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          path: ./dist
      - name: Output contents
        run: ls
      # Obtiene los permisos (ya no va por secrets) de AWS para la ejecución de este job
      - name: Get AWS permissions
        uses: aws-actions/configure-aws-credentials
        with:
          # Este valor viene de la configuración hecha en AWS
          role-to-assume: arn:aws:iam::450226343468:role/GitHubDemo
          aws-region: us-east-1
      - name: Deploy site
        id: deploy
        # Usando el custom JavaScript action
        # No va a funcionar porque no tengo cuenta AWS S3 ni los access keys para mandar hacer el deploy
        # uses: ./.github/actions/deploy-s3-javascript
        # Usando el custom Docker action. Es igual que usar el custom JavaScript action.
        uses: ./.github/actions/deploy-s3-docker
        # Sobre estas keys de AWS que guardamos como secrets en GitHub indicar que no es lo mejor
        # Esto es porque pueden haber problemas de script injection, pero además porque lo normal es
        # que los de Sistemas no te den estas claves, que dan permiso a todo.
        # La mejor alternativa es usar OpenID Connect
        # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect
        # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
        # Esto se quita y se crea un nuevo step (Get AWS permissions)
        #env:
        #  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          bucket: gha-security-hosting-demo
          dist-folder: ./dist
      # El output del custom JavaScript action
      - name: Output information
        run: |
          echo "Live URL: ${{ steps.deploy.outputs.website-url }}"
  # Nuevo job en el que se usa el custom JavaScript action
  # information:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get code
  #       uses: actions/checkout@v3
  #     - name: Run custom action
  #       # IMPORTANTE: Esto NO funciona si es un action local almacenado en este repositorio porque
  #       #  falta obtener el código (checkout) que incluye la definición del custom action.
  #       # Si fuera un custom action almacenado en otro repositorio podríamos usarlo sin hacer el checkout
  #       # del código.
  #       # Por eso arriba añadimos el step Get code
  #       uses: ./.github/actions/deploy-s3-javascript
